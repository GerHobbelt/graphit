element Vertex end
element Edge end
const edges : edgeset{Edge}(Vertex,Vertex) = load (argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const old_rank : vector{Vertex}(double) = 1.0/vertices.size();
const new_rank : vector{Vertex}(double) = 0.0;
const out_degree : vector {Vertex}(int) = edges.getOutDegrees();
const error : vector{Vertex}(double) = 0.0;
const damp : double = 0.85;
const beta_score : double = (1.0 - damp) / vertices.size();

func updateEdge(src : Vertex, dst : Vertex)
    new_rank[dst] = new_rank[dst] + old_rank[src] / out_degree[src];
end

func updateVertex(v : Vertex)
    var old_score : double = old_rank[v];
    new_rank[v] = beta_score + damp*(new_rank[v]);
    error[v] = fabs(new_rank[v] - old_rank[v]);
    old_rank[v] = new_rank[v];
    new_rank[v] = 0.0;
end

func printRank(v : Vertex)
    print old_rank[v];
end

func main()
    startTimer();
    for i in 0:10
        #s1# edges.apply(updateEdge);
        vertices.apply(updateVertex);
    end

    var elapsed_time : double = stopTimer();
    print "elapsed time: ";
    print elapsed_time;
end

schedule:
    program->setApply("s1", "pull")->setApply("s1", "parallel");
    program->fuseFields("out_degree", "old_rank");