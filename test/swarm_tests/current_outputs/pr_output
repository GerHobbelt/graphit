#include "swarm_intrinsics.h"
#include "scc/queues.h"
#include "scc/autoparallel.h"
int __argc;
char **__argv;
swarm_runtime::GraphT<int> edges;
float *old_rank;
float *new_rank;
int *out_degrees;
float *error;
int *generated_tmp_vector_2;
float damp;
float beta_score;
void error_generated_vector_op_apply_func_4(int v) {
        error[v] = 0;
}
void generated_vector_op_apply_func_3(int v) {
        out_degrees[v] = generated_tmp_vector_2[v];
}
void new_rank_generated_vector_op_apply_func_1(int v) {
        new_rank[v] = 0;
}
void old_rank_generated_vector_op_apply_func_0(int v) {
        old_rank[v] = 1;
}
void updateEdge(int src, int dst) {
        swarm_runtime::sum_reduce(new_rank[dst], (old_rank[src] / out_degrees[src]));
}
void updateVertex(int v) {
        new_rank[v] = (beta_score + (damp * new_rank[v]));
        error[v] = fabs((new_rank[v] - old_rank[v]));
        old_rank[v] = new_rank[v];
        new_rank[v] = 0;
}
SWARM_FUNC_ATTRIBUTES
void swarm_main() {
        for(int i = 1; i < 10; i++) {
                for (int _iter = 0; _iter < edges.num_edges; _iter++) {
                        int _src = edges.edge_src[_iter];
                        int _dst = edges.edge_dst[_iter];
                        updateEdge(_src, _dst);
                };
                for (int _iter = 0; _iter < swarm_runtime::builtin_getVertices(edges); _iter++) {
                        updateVertex(_iter);
                };
                swarm_runtime::print(swarm_runtime::builtin_sum(error, swarm_runtime::builtin_getVertices(edges)));
        }
}
int main(int argc, char* argv[]) {
        __argc = argc;
        __argv = argv;
        swarm_runtime::load_graph(edges, "test.el");
        old_rank = new float[swarm_runtime::builtin_getVertices(edges)];
        new_rank = new float[swarm_runtime::builtin_getVertices(edges)];
        out_degrees = new int[swarm_runtime::builtin_getVertices(edges)];
        error = new float[swarm_runtime::builtin_getVertices(edges)];
        generated_tmp_vector_2 = new int[swarm_runtime::builtin_getVertices(edges)];
        damp = 0.85;
        beta_score = ((1 - damp) / swarm_runtime::builtin_getVertices(edges));
        for (int _iter = 0; _iter < swarm_runtime::builtin_getVertices(edges); _iter++) {
                old_rank_generated_vector_op_apply_func_0(_iter);
        };
        for (int _iter = 0; _iter < swarm_runtime::builtin_getVertices(edges); _iter++) {
                new_rank_generated_vector_op_apply_func_1(_iter);
        };
        generated_tmp_vector_2 = swarm_runtime::builtin_getOutDegrees(edges);
        for (int _iter = 0; _iter < swarm_runtime::builtin_getVertices(edges); _iter++) {
                generated_vector_op_apply_func_3(_iter);
        };
        for (int _iter = 0; _iter < swarm_runtime::builtin_getVertices(edges); _iter++) {
                error_generated_vector_op_apply_func_4(_iter);
        };
                SCC_PARALLEL( swarm_main(); );
}