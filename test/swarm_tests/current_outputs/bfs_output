#include "swarm_intrinsics.h"
#include "scc/queues.h"
#include "scc/autoparallel.h"
int __argc;
char **__argv;
swarm_runtime::GraphT<int> edges;
int *parent;
swarm::PrioQueue<int32_t> swarm_frontier;
void parent_generated_vector_op_apply_func_0(int v) {
        parent[v] = 1;
}
bool updateEdge(int src, int dst) {
        bool output1;
        parent[dst] = src;
        output1 = (bool)1;
        return output1;
}
bool toFilter(int v) {
        bool output;
        output = (parent[v]) == (1);
        return output;
}
SWARM_FUNC_ATTRIBUTES
void swarm_main() {
        swarm_runtime::VertexFrontier frontier = swarm_runtime::create_new_vertex_set(swarm_runtime::builtin_getVertices(edges), 0);
        swarm_runtime::builtin_addVertex(frontier, 1);
        swarm_runtime::populate_swarm_frontier(frontier, swarm_frontier);
        swarm_frontier.for_each_prio([](unsigned level, int src, auto push) {
                int32_t edgeZero = edges.h_src_offsets[src];
                int32_t edgeLast = edges.h_src_offsets[src+1];
                for (int i = edgeZero; i < edgeLast; i++) {
                        int dst = edges.h_edge_dst[i];
                        int src = src;
                        if (toFilter(dst)) {
                                {
                                        parent[dst] = src;
                                        output1 = (bool)1;
                                        if (output1) {
                                                push(level + 1, dst);
                                        }
                                }
                        }
                }
        });
        swarm_runtime::clear_frontier(frontier);
        swarm_runtime::print("finished running BFS");
}
int main(int argc, char* argv[]) {
        __argc = argc;
        __argv = argv;
        swarm_runtime::load_graph(edges, "../../test/graphs/test.el");
        parent = new int[swarm_runtime::builtin_getVertices(edges)];
        for (int _iter = 0; _iter < swarm_runtime::builtin_getVertices(edges); _iter++) {
                parent_generated_vector_op_apply_func_0(_iter);
        };
                SCC_PARALLEL( swarm_main(); );
}