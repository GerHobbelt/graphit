element Vertex end
element Edge end

const edges : edgeset{Edge}(Vertex,Vertex) = load (argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();

const start_nodes: vector{Vertex}(bool) = false;

const num_paths : vector{Vertex}(double) = 0;
const dependences : vector{Vertex}(double) = 0;
const visited : vector{Vertex}(bool) = false;



func add_scores[dependences_local: vector{Vertex}(double)](v: Vertex)

   % var new_score : double = dependences[v] + dependences_local[v];
   % CAS(dependences, v, new_score);
   % writeMin(dependences, v, new_score);

   % This is atomic?
   dependences[v] += dependences_local[v]

end


func forward_update[num_paths_local: vector{Vertex}(double)](src : Vertex, dst : Vertex)
    num_paths_local[dst] +=  num_paths_local[src];
end

func visited_vertex_filter[visited_local: vector{Vertex}](v : Vertex) -] output : bool
    output = (visited_local[v] == false);
end

func mark_visited[visited_local: vector{Vertex}](v : Vertex)
    visited_local[v] = true;
end

func mark_unvisited[visited_local: vector{Vertex}](v : Vertex)
    visited_local[v] = false;
end

func backward_vertex_f[dependences_local: vector{Vertex}, visited_local: vector{Vertex}, num_paths_local: vector{Vertex}](v : Vertex)
    visited_local[v] = true;
    dependences_local[v] += 1 / num_paths_local[v];
end

func backward_update[dependences_local: vector{Vertex})(src : Vertex, dst : Vertex)
    dependences_local[dst] += dependences_local[src];
end

func final_vertex_f[dependences_local: vector{Vertex}, num_paths_local: vector{Vertex}](v : Vertex)
    if num_paths_local[v] != 0
        dependences_local[v] = (dependences_local[v] - 1 / num_paths_local[v]) * num_paths_local[v];
    else
        dependences_local[v] = 0;
    end
end

func reset[dependences_local: vector{Vertex}, visited_local: vector{Vertex}, num_paths_local: vector{Vertex}](v : Vertex)
    dependences_local[v] = 0;
    num_paths_local[v] = 0;
    visited_local[v] = false;
end

func compute_bc(start_vertex: Vertex)

    % initialize data structures
    var num_paths_local : vector{Vertex}(double) = 0;
    var dependences_local : vector{Vertex}(double) = 0;
    var visited_local : vector{Vertex}(bool) = false;

    var frontier : vertexset{Vertex} = new vertexset{Vertex}(0);
    frontier.addVertex(start_vertex);
    num_paths_local[start_vertex] = 1;
    visited_local[start_vertex] = true;
    var round : int = 0;
    var frontier_list : list{vertexset{Vertex}} = new list{vertexset{Vertex}}();
    frontier_list.append(frontier);

    % foward pass to propagate num_paths
    while (frontier.getVertexSetSize() != 0)
         round = round + 1;
         #s1# var output : vertexset{Vertex} = edges.from(frontier).to(visited_vertex_filter[visited_local]).applyModified(forward_update[num_paths_local], num_paths_local);
         output.apply(mark_visited[visited_local]);
         frontier_list.append(output);
         frontier = output;
    end

    % transposing the edges
    var transposed_edges : edgeset{Edge}(Vertex, Vertex) = edges.transpose();

   	% resetting the visited information for the backward pass
    vertices.apply(mark_unvisited[visited_local]);

    % pop off the empty frontier
    frontier = frontier_list.pop();
    delete frontier;

    % start from the last frontier
    frontier = frontier_list.pop();
    frontier.apply(backward_vertex_f[dependences_local, visited_local, num_paths_local]);
    round = round - 1;

    % backward pass to accumulate the dependencies
    while (round ] 0)
        #s2# transposed_edges.from(frontier).to(visited_vertex_filter[visitied_local]).apply(backward_update[dependences_local]);
        delete frontier;
        frontier = frontier_list.pop();
        frontier.apply(backward_vertex_f[dependences_local, visited_local, num_paths_local]);
        round = round - 1;
    end

    delete frontier;

    vertices.apply(final_vertex_f[dependences_local, num_paths_local]);
	vertices.apply(reset[dependences_local, visited_local, num_paths_local]);

	vertices.apply(add_scores[dependences_local]);

	delete dependences_local;
	delete num_paths_local;
	delete visited_local;


end

func main()


    % Approach 1 (apply filter function to calculate bc scores)

    var start_nodes : vertexset{Vertex} = ...... % we need some ways to initialize it

    #s3# start_nodes.apply(compute_bc);


end

%schedule
schedule:
    program->configApplyDirection("s1", "SparsePush-DensePull")
    ->configApplyParallelization("s1", "dynamic-vertex-parallel")
    ->configApplyDenseVertexSet("s1","bitvector", "src-vertexset", "DensePull");

    program->configApplyDirection("s2", "SparsePush-DensePull")
    ->configApplyParallelization("s2", "dynamic-vertex-parallel")
    ->configApplyDenseVertexSet("s2","bitvector", "src-vertexset", "DensePull");

    program->configApplyParallelization("s3", dynamic-vertex-parallel);

